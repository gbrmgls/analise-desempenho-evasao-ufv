{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["initialGraph","label","labels","data","value","color","isLoaded","campiToGraph","campi","map","campus","nome","aprovados","numEstudantes","departamentosToGraph","departamentos","dep","cursosCampusToGraph","cursos","nomeCampus","curso","disciplinasDeptoToGraph","disciplinas","nomeDepto","disciplina","disciplinasCursoToGraph","nomeCurso","turmasDisciplinaToGraph","nomeDisciplina","keysToRemove","Object","keys","filter","key","includes","App","useState","setCampi","displayCampusOptions","setDisplayCampusOptions","setCursos","setDisciplinas","turmas","setTurmas","notas","setNotas","setDepartamentos","contatos","setContatos","setFoto","semTurmas","setSemTurmas","undefined","selectedCampus","setSelectedCampus","selectedDepto","setSelectedDepto","selectedCurso","setSelectedCurso","selectedDisciplina","setSelectedDisciplina","setSelectedTurma","disciplinaCursoDepto","setDisciplinaCursoDepto","minTurma","setMinTurma","grafico","setGrafico","modalCampusOpen","setModalCampusOpen","modalDeptoOpen","setModalDeptoOpen","modalSemTurmaOpen","setModalSemTurmaOpen","getSemTurmas","a","axios","get","res","st","getCampi","Foto","btoa","String","fromCharCode","Uint8Array","getDepartamentos","deptos","console","log","getContatos","conts","getDepartamentosAprov","getDepartamento","deptoNome","resDepto","getCursosCampus","campusNome","getDisciplinasCurso","cursoNome","getNotasDisciplina","resNotas","sort","b","localeCompare","resTurmas","getNotasDisciplinaDepto","getMinAprovado","resMin","min","handleChangeCampiSelect","e","campusSelecionado","find","SiglaCamp","cursosCampus","handleChangeCursosSelect","target","cursoSelecionado","CodCurso","Number","disciplinasCurso","handleChangeDisciplinasSelect","disciplinaSelecionada","CodDisc","disciplinaNotas","minAprovado","handleChangeTurmasSelect","semestre","split","turmaSelecionada","turma","Ano","Semestre","handleChangeDeptosSelect","deptoSelecionado","depto","SiglaDepto","disciplinasDepto","useEffect","className","isOpen","contentLabel","onClick","src","alt","End","length","cont","tel","strtel","toString","substring","style","width","marginLeft","marginRight","x","onChange","concat","index","datasets","categoryPercentage","barPercentage","backgroundColor","height","options","responsive","maintainAspectRatio","scales","y","beginAtZero","textAlign","margin","TaxAprov","float","cursor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.0d0aa26c.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport { Bar } from 'react-chartjs-2';\nimport Modal from 'react-modal';\n\nconst initialGraph = {\n    label: '',\n    labels: [],\n    data: [{\n        value: 0,\n        color: ''\n    }],\n    isLoaded: false\n};\n\nconst campiToGraph = (campi) => {\n    return {\n        labels: campi.map(campus => campus.nome),\n        label: 'Porcentagem de aprovação por Campus',\n        data: campi.map(campus => {\n            const aprovados = campus['SUM(Turma.Aprovados)'];\n            const numEstudantes = campus['SUM(Turma.NumEstudantes)'];\n            return {\n                value: !aprovados || !numEstudantes ? 0 : aprovados / numEstudantes * 100,\n                color: 'rgba(75, 192, 192, 1)'\n            };\n        }),\n        isLoaded: true\n    }\n};\n\nconst departamentosToGraph = (departamentos) => {\n    return {\n        labels: departamentos.map(dep => dep.nome),\n        label: 'Porcentagem de aprovação por Departamento',\n        data: departamentos.map(dep => {\n            const aprovados = dep['sum(Turma.Aprovados)'];\n            const numEstudantes = dep['sum(Turma.NumEstudantes)'];\n            return {\n                value: !aprovados || !numEstudantes ? 0 : aprovados / numEstudantes * 100,\n                color: 'rgba(75, 192, 192, 1)'\n            };\n        }),\n        isLoaded: true\n    }\n};\n\nconst cursosCampusToGraph = (cursos, nomeCampus) => {\n    return {\n        labels: cursos.map(curso => curso.nome),\n        label: 'Porcentagem de aprovação por Cursos do ' + nomeCampus,\n        data: cursos.map(curso => {\n            const aprovados = curso['SUM(Turma.Aprovados)'];\n            const numEstudantes = curso['SUM(Turma.NumEstudantes)'];\n            return {\n                value: !aprovados || !numEstudantes ? 0 : aprovados / numEstudantes * 100,\n                color: 'rgba(75, 192, 192, 1)'\n            };\n        }),\n        isLoaded: true\n    }\n};\n\nconst disciplinasDeptoToGraph = (disciplinas, nomeDepto) => {\n    return {\n        labels: disciplinas.map(disciplina => disciplina.nome),\n        label: 'Porcentagem de aprovação por Disciplina do ' + nomeDepto,\n        data: disciplinas.map(disciplina => {\n            const aprovados = disciplina['sum(Turma.Aprovados)'];\n            const numEstudantes = disciplina['sum(Turma.NumEstudantes)'];\n            return {\n                value: !aprovados || !numEstudantes ? 0 : aprovados / numEstudantes * 100,\n                color: 'rgba(75, 192, 192, 1)'\n            };\n        }),\n        isLoaded: true\n    }\n};\n\nconst disciplinasCursoToGraph = (disciplinas, nomeCampus, nomeCurso) => {\n    return {\n        labels: disciplinas.map(disciplina => disciplina.nome),\n        label: 'Porcentagem de aprovação por Disciplina do Curso de ' + nomeCurso + ' do ' + nomeCampus,\n        data: disciplinas.map(disciplina => {\n            const aprovados = disciplina['sum(Turma.Aprovados)'];\n            const numEstudantes = disciplina['sum(Turma.NumEstudantes)'];\n            return {\n                value: !aprovados || !numEstudantes ? 0 : aprovados / numEstudantes * 100,\n                color: 'rgba(75, 192, 192, 1)'\n            };\n        }),\n        isLoaded: true\n    }\n};\n\nconst turmasDisciplinaToGraph = (disciplina, nomeDisciplina, nomeCampus, nomeCurso) => {\n    const keysToRemove = [\n        'Abandonos',\n        'Ano',\n        'Aprovados',\n        'CodCurso',\n        'CodDisc',\n        'MaiorNota',\n        'MenorNota',\n        'MédiaNota',\n        'NumEstudantes',\n        'Reprovados',\n        'Semestre'];\n\n    return {\n        labels: ['Notas 0-10', 'Notas 10-20', 'Notas 20-30', 'Notas 30-40', 'Notas 40-50', 'Notas 50-60', 'Notas 60-70', 'Notas 70-80', 'Notas 80-90', 'Notas 90-100'],\n        label: 'Notas de ' + nomeDisciplina + (nomeCurso ? ' do Curso de ' : '') + (nomeCurso || '') + ' do ' + nomeCampus,\n        data: Object.keys(disciplina).filter(key => !keysToRemove.includes(key))\n            .map(key => {\n                return {\n                    value: disciplina[key],\n                    color: 'rgba(75, 192, 192, 1)'\n                };\n            }),\n        isLoaded: true\n    }\n};\n\nfunction App() {\n        const [campi, setCampi] = useState([]);\n        const [displayCampusOptions, setDisplayCampusOptions] = useState(false);\n        const [selectedCampusOption, setSelectedCampusOption] = useState('');\n\n        const [cursos, setCursos] = useState([]);\n        const [disciplinas, setDisciplinas] = useState([]);\n        const [turmas, setTurmas] = useState([]);\n        const [notas, setNotas] = useState([]);\n        const [departamentos, setDepartamentos] = useState([]);\n        const [contatos, setContatos] = useState([]);\n        const [foto, setFoto] = useState('');\n        const [semTurmas, setSemTurmas] = useState([]);\n\n        const [selectedCampus, setSelectedCampus] = useState(undefined);\n        const [selectedDepto, setSelectedDepto] = useState(undefined);\n        const [selectedCurso, setSelectedCurso] = useState(undefined);\n        const [selectedDisciplina, setSelectedDisciplina] = useState(undefined);\n        const [selectedTurma, setSelectedTurma] = useState(undefined);\n\n        const [disciplinaCursoDepto, setDisciplinaCursoDepto] = useState('');\n        const [minTurma, setMinTurma] = useState(undefined);\n\n        const [grafico, setGrafico] = useState(initialGraph);\n\n        const [modalCampusOpen, setModalCampusOpen] = useState(false);\n        const [modalDeptoOpen, setModalDeptoOpen] = useState(false);\n        \n        const [modalSemTurmaOpen, setModalSemTurmaOpen] = useState(false);\n        \n        const getSemTurmas = async() =>{\n            try {\n                const res = await axios.get(`/route_example/bd_ufv/sem_turma`);\n                const st = res.data;\n\n                setSemTurmas(st);\n            } catch {\n                return;\n            }\n        };\n        \n        const getCampi = async() => {\n            try {\n                const res = await axios.get(`/route_example/bd_ufv`);\n                const campi = res.data.map(campus => (\n                    {\n                        ...campus,\n                        Foto: `data:image/png;base64,${btoa(String.fromCharCode(...new Uint8Array(campus.Foto.data)))}`\n                    }\n                ));\n\n                setCampi(campi);\n\n                setGrafico(campiToGraph(campi));\n            } catch {\n                return;\n            }\n        };\n\n        const getDepartamentos = async() => {\n            try {\n                const res = await axios.get(`/route_example/bd_ufv/departamento`);\n                const deptos = res.data\n                console.log(deptos)\n                setDepartamentos(deptos)\n            } catch {\n                return;\n            }\n        };\n\n        const getContatos = async() => {\n            try {\n                const res = await axios.get(`/route_example/bd_ufv/departamento/contatos`);\n                const conts = res.data\n                console.log(conts)\n                setContatos(conts)\n            } catch {\n                return;\n            }\n        };\n\n        const getDepartamentosAprov = async() => {\n            try {\n                const res = await axios.get(`/route_example/bd_ufv/departamento/aprovacao`);\n                const departamentos = res.data;\n\n                return departamentos;\n            } catch {\n                return;\n            }\n        }\n\n        const getDepartamento = async(deptoNome) => {\n            try {\n                const res = await axios.get(`/route_example/bd_ufv/departamento/${deptoNome}`);\n                const resDepto = res.data;\n\n                setDisciplinas(resDepto);\n                return resDepto;\n            } catch {\n                return;\n            }\n        };\n\n        const getCursosCampus = async(campusNome) => {\n            try {\n                const res = await axios.get(`/route_example/bd_ufv/${campusNome}`);\n                const cursos = res.data//.sort((a,b) => a.nome.localeCompare(b.nome));\n                setCursos(cursos);\n\n                return cursos;\n            } catch {\n                return;\n            }\n        };\n\n        const getDisciplinasCurso = async(campusNome, cursoNome) => {\n            try {\n                const res = await axios.get(`/route_example/bd_ufv/curso/${cursoNome}`);\n                const disciplinas = res.data//.sort((a,b) => a.nome.localeCompare(b.nome));\n                setDisciplinas(disciplinas);\n\n                return disciplinas;\n            } catch {\n                return;\n            }\n        };\n\n        const getNotasDisciplina = async(curso, disciplina) => {\n            try {\n                const resNotas = await axios.get(`/route_example/bd_ufv/disciplina/${curso}/${disciplina}/`);\n                const notas = resNotas.data.sort((a,b) => a.nome.localeCompare(b.nome))[0];\n\n                const resTurmas = await axios.get(`/route_example/bd_ufv/disciplina/turmas/${curso}/${disciplina}/`);\n                const turmas = resTurmas.data;\n                return {notas, turmas};\n            } catch {\n                return;\n            }\n        };\n\n        const getNotasDisciplinaDepto = async(disciplina) => {\n            try {\n                const resNotas = await axios.get(`/route_example/bd_ufv/disciplina/${disciplina}/`);\n                const notas = resNotas.data.sort((a,b) => a.nome.localeCompare(b.nome))[0];\n\n                return {notas, turmas};\n            } catch {\n                return;\n            }\n        };\n\n        const getMinAprovado = async(curso, disciplina) => {\n            try {\n                const resMin = await axios.get(`route_example/bd_ufv/disciplina/${curso}/${disciplina}/min`);\n                const min = resMin.data[0];\n\n                return min;\n            } catch {\n                return;\n            }\n        };\n\n        const handleChangeCampiSelect = async (e) => {\n            setSelectedCurso(undefined);\n            setSelectedDisciplina(undefined);\n            setSelectedDepto(undefined);\n            setMinTurma(undefined);\n            setCursos([]);\n            setDisciplinas([]);\n            setTurmas([]);\n            setNotas([]);\n\n            if(e === \"\") {\n                setSelectedCampus(undefined);\n\n                setGrafico(campiToGraph(campi));\n                return;\n            }\n\n            const campusSelecionado = campi.find(campus => campus.SiglaCamp === e);\n            setSelectedCampus(campusSelecionado);\n            setFoto(campusSelecionado.Foto);\n\n            const cursosCampus = await getCursosCampus(campusSelecionado.SiglaCamp);\n            setGrafico(cursosCampusToGraph(cursosCampus, campusSelecionado.nome));\n        };\n\n        const handleChangeCursosSelect = async (e) => {\n            setDisciplinas([]);\n            setTurmas([]);\n            setNotas([]);\n            setSelectedDisciplina(undefined);\n            setMinTurma(undefined);\n            setDisciplinaCursoDepto('Curso');\n            if(e.target.value === \"\") {\n                setSelectedCurso(undefined);\n\n                setGrafico(cursosCampusToGraph(cursos, selectedCampus.nome));\n                return;\n            }\n\n            const cursoSelecionado = cursos.find(curso => curso.CodCurso === Number(e.target.value));\n            setSelectedCurso(cursoSelecionado);\n            \n            const disciplinasCurso = await getDisciplinasCurso(selectedCampus.SiglaCamp, cursoSelecionado.CodCurso);\n\n            setGrafico(disciplinasCursoToGraph(disciplinasCurso, selectedCampus.nome, cursoSelecionado.nome));\n        };\n\n        const handleChangeDisciplinasSelect = async (e) => {\n            setTurmas([]);\n            setNotas([]);\n            setMinTurma(undefined);\n            if(e.target.value === \"\") {\n                setSelectedDisciplina(undefined);\n\n                if(disciplinaCursoDepto.localeCompare('Curso') === 0) {\n                    setGrafico(disciplinasCursoToGraph(disciplinas, selectedCampus.nome, selectedCurso.nome));\n                }\n\n                if(disciplinaCursoDepto.localeCompare('Depto') === 0) {\n                    setGrafico(disciplinasDeptoToGraph(disciplinas, selectedDepto.nome));\n                }\n                return;\n            }\n\n            const disciplinaSelecionada = disciplinas.find(disciplina => disciplina.CodDisc === e.target.value);\n            setSelectedDisciplina(disciplinaSelecionada);\n\n            if(disciplinaCursoDepto.localeCompare('Curso') === 0){                \n                const disciplinaNotas = await getNotasDisciplina(selectedCurso.CodCurso, disciplinaSelecionada.CodDisc);\n\n                setGrafico(turmasDisciplinaToGraph(disciplinaNotas.notas, disciplinaSelecionada.nome, selectedCampus.nome + ' (Todos semestres)', selectedCurso.nome));\n                setTurmas(disciplinaNotas.turmas);\n                setNotas(disciplinaNotas.notas);\n\n                const minAprovado = await getMinAprovado(selectedCurso.CodCurso, disciplinaSelecionada.CodDisc);\n                setMinTurma(minAprovado);\n            }\n\n            if(disciplinaCursoDepto.localeCompare('Depto') === 0) {\n                const disciplinaNotas = await getNotasDisciplinaDepto(disciplinaSelecionada.CodDisc);\n                setGrafico(turmasDisciplinaToGraph(disciplinaNotas.notas, disciplinaSelecionada.nome, selectedCampus.nome + ' (Todos semestres)'));\n            }\n        };\n\n        const handleChangeTurmasSelect = async (e) => {\n            if(e.target.value === \"\") {\n                setSelectedTurma(undefined);\n\n                setGrafico(turmasDisciplinaToGraph(notas, selectedDisciplina.nome, selectedCampus.nome + ' (Todos semestres)', selectedCurso.nome));\n                return;\n            }\n            const semestre = e.target.value.split('+');\n            const turmaSelecionada = turmas.find(turma => turma.Ano === Number(semestre[0]) && turma.Semestre === Number(semestre[1]));\n\n            setGrafico(turmasDisciplinaToGraph(turmaSelecionada, selectedDisciplina.nome, selectedCampus.nome, selectedCurso.nome));\n        };\n\n        const handleChangeDeptosSelect = async (e) => {\n            setSelectedCurso(undefined);\n            setDisciplinas([]);\n            setTurmas([]);\n            setNotas([]);\n            setMinTurma(undefined);\n            setSelectedDisciplina(undefined);\n\n            setDisciplinaCursoDepto('Depto');\n            if(e.target.value === \"\") {\n                setSelectedDepto(undefined);\n\n                setGrafico(cursosCampusToGraph(cursos, selectedCampus.nome));\n                return;\n            }\n\n            if(e.target.value.localeCompare('Todos') === 0) {\n               const departamentos = await getDepartamentosAprov();\n               setGrafico(departamentosToGraph(departamentos));\n            } else {\n                console.log(departamentos, e.target.value);\n                const deptoSelecionado = departamentos.find(depto => depto.SiglaDepto == e.target.value);\n                const disciplinasDepto = await getDepartamento(deptoSelecionado.SiglaDepto)\n                console.log(disciplinasDepto);\n                setGrafico(disciplinasDeptoToGraph(disciplinasDepto, deptoSelecionado.nome));\n                setSelectedDepto(deptoSelecionado);\n                console.log(selectedDepto);\n            }\n\n        }\n\n        const openCampusModal = () => setModalCampusOpen(true);\n        const closeCampusModal = () => setModalCampusOpen(false);\n\n        const openDeptoModal = () => setModalDeptoOpen(true);\n        const closeDeptoModal = () => setModalDeptoOpen(false);\n\n        const openSemTurmaModal = () => setModalSemTurmaOpen(true);\n        const closeSemTurmaModal = () => setModalSemTurmaOpen(false);\n\n        useEffect(() => {\n            getCampi();\n            getDepartamentos();\n            getContatos();\n            getSemTurmas();\n        }, []);\n\n        return (\n            <div className=\"App\">\n                <Modal\n                    isOpen={modalCampusOpen}\n                    contentLabel={selectedCampus == undefined ? \"Selecione um campus\" : selectedCampus.SiglaCamp + \" - \" + selectedCampus.nome}\n                >\n                    <h1>{selectedCampus == undefined ? \"Selecione um campus\" : selectedCampus.SiglaCamp + \" - \" + selectedCampus.nome}</h1>\n                    <button className=\"modalButton\" onClick={closeCampusModal}>Fechar</button>\n                    <div className=\"modalContent\">\n                        <div className=\"modalFoto\">\n                                    {\n                                        selectedCampus !== undefined ?\n                                            <img src={selectedCampus.Foto} alt=\"\" />\n                                        : <></>\n                                    }\n                                </div>\n                        <h2>Endereço: {selectedCampus == undefined ? \"\" : selectedCampus.End}</h2>\n                    </div>\n                </Modal>\n\n                <Modal\n                    isOpen={modalDeptoOpen}\n                    contentLabel={selectedDepto == undefined ? \"Selecione um departamento\" : selectedDepto.SiglaDepto + \" - \" + selectedDepto.nome}\n                >\n                    <h1>{selectedDepto == undefined ? \"Selecione um departamento\" : selectedDepto.SiglaDepto + \" - \" + selectedDepto.nome}</h1>\n                    <button className=\"modalButton\" onClick={closeDeptoModal}>Fechar</button>\n                    <div className=\"modalContent\">\n                        <h2>Contatos: </h2>\n                        <ul>\n                            {contatos.length > 0 && selectedDepto !== undefined ?\n                                contatos.filter(cont => cont.SiglaDepto == selectedDepto.SiglaDepto).map(cont => {\n                                    if(cont.tel == null) return \"Esse departamento não possui contatos.\"\n                                    var strtel = cont.tel.toString()\n                                    return <li>{\"(31) \" + strtel.substring(0,4) + \"-\" + strtel.substring(4)}</li>\n                                }) : \"Esse departamento não possui contatos.\"\n                            }\n                        </ul>\n                    </div>\n                </Modal>\n\n                <Modal\n                    isOpen={modalSemTurmaOpen}\n                >\n                    <h1>As seguintes disciplinas nos seguintes anos ainda não possuem turmas registradas no sistema:</h1>\n                    <button className=\"modalButton\" onClick={closeSemTurmaModal}>Fechar</button>\n                    <div className=\"modalContent\">\n                        <ul>\n                            {semTurmas.length > 0 ?\n                                semTurmas.map((st) =>\n                                    <li>{st.CodDisc} - {st.nome} ({st.Ano})</li>\n                                ) : 'Carregando...'\n                            }\n                        </ul>\n                    </div>\n                </Modal>\n                <div className=\"selects\">\n                    {/* <select className=\"campi\" onChange={handleChangeCampiSelect}>\n                        {campi.length > 0 ? \n                            campi.map(campus => \n                                <option key={campus.SiglaCamp} value={campus.SiglaCamp}>{campus.nome}</option>\n                            ) : \n                            <option value=\"\">Carregando...</option>\n                        }\n                    </select> */}\n                    \n                    <div className=\"selectCampus\">\n                        <div className=\"toggleOptions\" onClick={() => setDisplayCampusOptions(!displayCampusOptions)}>\n                                {campi.length > 0 && selectedCampus !== undefined &&\n                                    <div className=\"foto\">                                        \n                                        <img src={selectedCampus.Foto} alt=\"\" />\n                                    </div>\n                                }\n                                {campi.length > 0 && selectedCampus !== undefined ? \n                                    <div className=\"nome\">\n                                        {selectedCampus.SiglaCamp}\n                                    </div> :\n                                    <div className=\"nome\" style={{ width: 'unset', marginLeft: 'auto', marginRight: 'auto' }}>\n                                        {campi.length > 0 ? 'Selecione um campus' : 'Carregando...' }\n                                    </div>\n                                }\n                        </div>  \n                        <div className=\"options\" style={{'display' : displayCampusOptions? 'flex' : 'none'}}>\n                            <div className=\"campus\" onClick={() => (handleChangeCampiSelect(''), setDisplayCampusOptions(!displayCampusOptions))}>\n                                <div className=\"foto\">\n                                </div>\n                                <div className=\"nome\">\n                                    Limpar\n                                </div>\n                            </div>\n                            {campi.length > 0 ? \n                                campi.map((x) => x).sort((a,b) => a.nome.localeCompare(b.nome)).map(campus => \n                                    <div className=\"campus\" onClick={() => (handleChangeCampiSelect(campus.SiglaCamp), setDisplayCampusOptions(!displayCampusOptions))}>\n                                        <div className=\"foto\">\n                                            <img src={campus.Foto} alt=\"\" />\n                                        </div>\n                                        <div className=\"nome\">\n                                            {campus.SiglaCamp}\n                                        </div>\n                                    </div>\n                                ) : \n                                <option value=\"\">Carregando...</option>\n                            }\n                        </div>\n                    </div>\n                    \n                    { selectedCampus?.SiglaCamp == \"CAV\" && !selectedCurso ?\n                    <select className=\"departamentos\" onChange={handleChangeDeptosSelect}>\n                        <option value=\"\">Selecione um Departamento</option>\n                        {departamentos.length > 0 ? \n                            [<option value=\"Todos\">Todos</option>].concat(\n                            departamentos.map((x) => x).sort((a,b) => a.nome.localeCompare(b.nome)).map(depto => \n                                <option key={depto.SiglaDepto} value={depto.SiglaDepto}>{depto.nome}</option>\n                            )) : \n                            <option value=\"\">Carregando...</option>\n                        }\n                    </select> : ''\n                    }\n                    \n                    {!selectedDepto && <select className=\"cursos\" onChange={handleChangeCursosSelect}>\n                        <option value=\"\">Selecione um Curso</option>\n                        {cursos.length > 0 ? \n                            cursos.map((x) => x).sort((a,b) => a.nome.localeCompare(b.nome)).map(curso => \n                                <option key={curso.CodCurso} value={curso.CodCurso}>{curso.nome}</option>\n                            ) : \n                            <option value=\"\">Carregando...</option>\n                        }\n                    </select>}\n\n                    <select className=\"disciplinas\" onChange={handleChangeDisciplinasSelect}>\n                        <option value=\"\">Selecione uma Disciplina</option>\n                        {disciplinas.length > 0 ? \n                            disciplinas.map((x) => x).sort((a,b) => a.nome.localeCompare(b.nome)).map((disciplina, index) => \n                                <option key={disciplina.CodDisc + `${index}`} value={disciplina.CodDisc}>{disciplina.nome}</option>\n                            ) : \n                            <option value=\"\">Carregando...</option>\n                        }\n                    </select>\n\n                    {turmas.length > 0 && \n                        <select className=\"turmas\" onChange={handleChangeTurmasSelect}>\n                            <option value=\"\">Selecione um semestre</option>\n                            {turmas.map((x) => x).sort().map((turma, index) => \n                                <option key={index} value={turma.Ano+'+'+turma.Semestre}>{`${turma.Ano}/${turma.Semestre}`}</option>\n                            )}\n\n                        </select>\n                    }\n\n                </div>\n\n                <div className=\"grafico1\">\n                    <Bar\n                        data={{\n                            labels: grafico.isLoaded ? grafico.labels : [],\n                            datasets: grafico.isLoaded ? [{\n                                label: grafico.label,\n                                categoryPercentage: .5,\n                                barPercentage: 1,\n                                // barThickness: 20,\n                                // maxBarThickness: 20,s\n                                // minBarLength: 2,\n                                data: grafico.data.map(e => e.value),\n                                backgroundColor: grafico.data.map(e => e.color),\n                                // borderColor: [\n                                //     'rgba(255, 99, 132, 1)',\n                                //     'rgba(54, 162, 235, 1)',\n                                //     'rgba(255, 206, 86, 1)',\n                                //     'rgba(75, 192, 192, 1)',\n                                //     'rgba(153, 102, 255, 1)',\n                                //     'rgba(255, 159, 64, 1)'\n                                // ],\n                                // borderWidth: 1\n                            }] : []\n                        }}\n                        height={100}\n                        // width={100}\n                        options= {{\n                            responsive: true,\n                            maintainAspectRatio: true,\n                            scales: {\n                                y: {\n                                    beginAtZero: true\n                                },\n                            },\n                        }}\n                    />\n                    {minTurma && \n                        <p style={{textAlign: 'left', margin: '0 0 0 0'}}>\n                            A turma de {minTurma.Ano}/{minTurma.Semestre} possui a menor taxa de aprovação na disciplina {selectedDisciplina.nome} com {minTurma.TaxAprov * 100}% de aprovação\n                        </p>\n                    }\n                </div>\n\n                <div style={{float: 'right', 'text-align': 'center', margin: '5px auto 5px auto', width: '40%'}}>\n                    <a style={{cursor: 'pointer'}} onClick={openSemTurmaModal}>Veja quais turmas ainda não possuem registro neste banco</a>\n                </div>\n                \n                <div className=\"info\" style={{float: 'left', width: '40%'}}>\n                    Info:\n\n                    <div className=\"infoCampus\">\n                    { selectedCampus != undefined ?\n                            <a style={{cursor: 'pointer'}} onClick={openCampusModal}>Informações do Campus</a> : ''\n                    }\n                    </div> \n                    <div className=\"infoDepto\">\n                    { selectedDepto != undefined ?\n                            <a style={{cursor: 'pointer'}} onClick={openDeptoModal}>Informações do Departamento</a> : ''\n                    }\n                    </div> \n                </div>\n                \n            </div>\n        );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}