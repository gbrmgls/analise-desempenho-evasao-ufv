{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","campi","setCampi","setFoto","label","labels","data","value","color","isLoaded","grafico","setGrafico","getCampi","a","axios","get","res","map","campus","Foto","btoa","String","fromCharCode","Uint8Array","dados","Array","from","length","Math","floor","random","sort","b","nome","localeCompare","aprovados","numEstudantes","useEffect","className","onChange","e","campusSelecionado","find","SiglaCamp","target","key","datasets","categoryPercentage","barPercentage","backgroundColor","height","options","responsive","maintainAspectRatio","scales","y","beginAtZero","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.609fafea.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport axios from 'axios';\nimport { Bar } from 'react-chartjs-2';\n\nfunction App() {\n        const [campi, setCampi] = useState([]);\n        const [departamentos, setDepartamentos] = useState([]);\n        const [foto, setFoto] = useState('');\n        const [grafico, setGrafico] = useState({\n            label: '',\n            labels: [],\n            data: [{\n                value: 0,\n                color: ''\n            }],\n            isLoaded: false\n        });\n\n        const getCampi = async() => {\n            try {\n                const res = await axios.get(`/route_example/bd_ufv`);\n                const campi = res.data.map(campus => (\n                    {\n                        ...campus,\n                        Foto: btoa(String.fromCharCode(...new Uint8Array(campus.Foto.data))),\n                        dados: Array.from({length: 6}, () => Math.floor(Math.random() * 10))\n                    }\n                )).sort((a,b) => a.nome.localeCompare(b.nome));\n\n                setCampi(campi);\n\n                setGrafico({\n                    labels: campi.map(campus => campus.nome),\n                    label: 'Porcentagem de aprovação por Campus',\n                    data: campi.map(campus => {\n                        const aprovados = campus['SUM(Turma.Aprovados)'];\n                        const numEstudantes = campus['SUM(Turma.NumEstudantes)'];\n                        return {\n                            value: !aprovados || !numEstudantes ? 0 : aprovados / numEstudantes * 100,\n                            color: 'rgba(75, 192, 192, 1)'\n                        };\n                    }),\n                    isLoaded: true\n                });\n\n                setFoto(`data:image/png;base64,${campi[0].Foto}`);\n            } catch {\n                return;\n            }\n        };\n\n        // const getDepartamentos = async() => {\n        //     const res = await axios.get(`/route_example/departamentos`);\n        //     const departamentos = res.data;\n        //     setDepartamentos(departamentos);\n        // };\n\n        const handleChangeCampiSelect = (e) => {\n            const campusSelecionado = campi.find(campus => campus.SiglaCamp === e.target.value);\n            setFoto(`data:image/png;base64,${campusSelecionado.Foto}`);\n            setGrafico(campusSelecionado.dados);\n        }\n\n        useEffect(() => {\n            getCampi();\n        }, []);\n\n        return (\n            <div className=\"App\">\n                <div className=\"selects\">\n                    <select className=\"campi\" onChange={handleChangeCampiSelect}>\n                        {campi.length > 0 ? \n                            campi.map(campus => \n                                <option key={campus.SiglaCamp} value={campus.SiglaCamp}>{campus.nome}</option>\n                            ) : \n                            <option value=\"\">Carregando...</option>\n                        }\n                    </select>\n\n                    <select className=\"cursos\">\n                        <option value=\"curso1\">curso1</option>\n                        <option value=\"curso2\">curso2</option>\n                        <option value=\"curso3\">curso3</option>\n                    </select>\n\n                    <select className=\"disciplinas\">\n                        <option value=\"disciplina1\">disciplina1</option>\n                        <option value=\"disciplina2\">disciplina2</option>\n                        <option value=\"disciplina3\">disciplina3</option>\n                    </select>\n\n                </div>\n\n                {/* <div className=\"grafico\">\n                    GRAFICO\n                    {foto !== '' && <img src={foto} alt=\"\"/>}\n                </div> */}\n                <div className=\"grafico1\">\n                    <Bar\n                        data={{\n                            labels: grafico.isLoaded ? grafico.labels : [],\n                            datasets: grafico.isLoaded ? [{\n                                label: grafico.label,\n                                categoryPercentage: .5,\n                                barPercentage: 1,\n                                // barThickness: 20,\n                                // maxBarThickness: 20,s\n                                // minBarLength: 2,\n                                data: grafico.data.map(e => e.value),\n                                backgroundColor: grafico.data.map(e => e.color),\n                                // borderColor: [\n                                //     'rgba(255, 99, 132, 1)',\n                                //     'rgba(54, 162, 235, 1)',\n                                //     'rgba(255, 206, 86, 1)',\n                                //     'rgba(75, 192, 192, 1)',\n                                //     'rgba(153, 102, 255, 1)',\n                                //     'rgba(255, 159, 64, 1)'\n                                // ],\n                                // borderWidth: 1\n                            }] : []\n                        }}\n                        height={100}\n                        // width={100}\n                        options= {{\n                            responsive: true,\n                            maintainAspectRatio: true,\n                            scales: {\n                                y: {\n                                    beginAtZero: true\n                                },\n                            },\n                        }}\n                    />\n                </div>\n            </div>\n        );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}